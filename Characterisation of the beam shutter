Here we are characterising the shutter speed of a laser shutter developed in Specrule Scientific.

Instruments used:

Experimental set-up:
Image uploaded as a separate file

Theory:
When a solenoid is energized (i.e., when an electric current is applied to the coil), 
the current flows through the wire wound around the solenoid's metal core (often iron). 
This creates a magnetic field, following the principle of electromagnetism.
The generated magnetic field attracts the solenoid’s metal core or plunger (if it is a pull-type solenoid) or repels it (in a push-type solenoid), 
causing it to move rapidly in a linear direction. 
The movement of the plunger is translated into the mechanical action needed to rotate or slide the flag or mirror of the shutter mechanism. 
In a beam shutter, this could mean rotating the flag into the light beam’s path to block it or moving it out of the path to allow the beam to pass.

Observations:
Figure BS1 and Figure BS2 are attached as separate files. Please check those.
The code for calculating the time period of the shutter is calculated and analysed using the code below.
Please note that a different algorithm can be used rather than the one given below.
Here, what I have done is that the point of threshold is considered to be the first point that's greater than 5% of the maximum point.
And the point of the starting of saturation as the first point that's greater than or equal to the 95% of the maximum.

Another way of finding the threshold and the saturation point is by find the slope of the curve. The point at which the slope has a drastic change can be considered as the threshold point.
And the point where the slope goes back to zero can be considered as the saturation point.

You can also smoothen the curve even more by increasing the "window" size. After this is done, find the difference between the adjacent points.
Keep a threshold and find when the difference crosses this threshold. There you get the threshold point. A similar logic can be done to find the saturation point.

clc;
clear all;
close all;

rise_time=zeros(21,1);
for i=0:20
    filename=sprintf('%03d.csv', i);
    data2=readtable(filename);
    increment=0.8*10^-6;
    r2=height(data2);
    t2= (0:increment:(r2-1)*increment)';
    t2=t2(1:100:r2);
    y2=data2.Var2;
    y2=y2(1:100:r2);
    windowSize2 = 10; % Adjust this value for more or less smoothing
    sData2 = movmean(y2, windowSize2);
    figure()
    plot(t2,sData2)
    hold on;
    xlabel('Time')
    ylabel('Intensity')
    lastpts_avg=mean(sData2(end-50:end));
    maximum=0.95*lastpts_avg;
    minimum=0.05*lastpts_avg;
    startIndex = find(sData2 >= minimum, 1);
    endIndex = find(sData2 >= maximum, 1);
    start=t2(startIndex);
    last=t2(endIndex);
    rise_time(i+1)=last-start;
end
disp("Rise times for files with rising slope")
disp(rise_time)
m=mean(rise_time)
disp("The mean of the rise time for files with rising slope:")
disp(m)

%% for falling slopes
fall_time=zeros(21,1);
for i=1:21
    filename2=sprintf('%03d.csv', 20+i);
    data2=readtable(filename2);
    increment=0.8*10^-6;
    r2=height(data2);
    t2= (0:increment:(r2-1)*increment)';
    t2=t2(1:100:r2);
    y2=data2.Var2;
    y2=y2(1:100:r2);
    windowSize2 = 10; % Adjust this value for more or less smoothing
    sData2 = movmean(y2, windowSize2);
    figure()
    plot(t2,sData2)
    hold on;
    xlabel('Time')
    ylabel('Intensity')
    firstpts2=sData2(1:50);
    firstpts_avg2=mean(firstpts2);
    maximum2=0.95*firstpts_avg2;
    minimum2=0.05*firstpts_avg2;
    startIndex2 = find(sData2 <= maximum2, 1);
    endIndex2 = find(sData2 <= minimum2, 1);
    start2=t2(startIndex2);
    last2=t2(endIndex2);
    fall_time(i)=last2-start2;
end
disp("Fall times for files with falling slope")
disp(fall_time)
m2=mean(fall_time);
disp("The mean of the fall time for files with falling slope:")
disp(m2)
